name: "CodeQL Analysis"

on:
  push:
    branches: [ "main" ]
    paths: [ ".github/workflows/**", "redzone-web/**", "Redzone-iOS/**" ]
  pull_request:
    branches: [ "main" ]
    paths: [ ".github/workflows/**", "redzone-web/**", "Redzone-iOS/**" ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ (matrix.language == 'swift' && 'macos-26') || 'ubuntu-latest' }}
    permissions:
      # required for all workflows
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: actions
          build-mode: none
        - language: javascript-typescript
          build-mode: none
        - language: swift
          build-mode: manual

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - if: matrix.build-mode == 'manual' && matrix.language == 'swift'
      name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1.6.0
      with:
        xcode-version: ^26
    - if: matrix.build-mode == 'manual' && matrix.language == 'swift'
      name: Setup Homebrew
      uses: tecolicom/actions-use-homebrew-tools@v1.3
      with:
        tools: 'xcbeautify'
    - if: matrix.build-mode == 'manual' && matrix.language == 'swift'
      name: Setup SPM
      uses: actions/cache@v3
      with:
        path: ./Redzone-iOS/.packages
        key: ${{ runner.os }}-packages-${{ hashFiles('**/Package.resolved') }}
        restore-keys: |
          ${{ runner.os }}-packages-
    - if: matrix.build-mode == 'manual' && matrix.language == 'swift'
      name: Resolve package dependencies
      run: set -o pipefail && NSUnbufferedIO=YES xcodebuild -resolvePackageDependencies -disableAutomaticPackageResolution -clonedSourcePackagesDirPath "./.packages" 2>&1 | xcbeautify --renderer github-actions
      working-directory: ./Redzone-iOS
    - if: matrix.build-mode == 'manual' && matrix.language == 'swift' 
      name: Setup certificates
      run: |
        echo -n '${{ secrets.IOS_DIST_P12_BASE64 }}' | base64 -D -i - -o $RUNNER_TEMP/cert.p12
        PASSWORD=$(uuidgen)
        KEYCHAIN_PATH=$RUNNER_TEMP/signing.keychain-db
        security create-keychain -p $PASSWORD $KEYCHAIN_PATH
        security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
        security unlock-keychain -p $PASSWORD $KEYCHAIN_PATH
        security import $RUNNER_TEMP/cert.p12 -P '${{ secrets.IOS_DIST_P12_PASSWORD }}' -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        security list-keychain -d user -s $KEYCHAIN_PATH
        security find-identity -v -p codesigning
    - if: matrix.build-mode == 'manual' && matrix.language == 'swift'
      name: Setup provisioning profiles
      shell: zsh {0}
      run: |
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        tar -xf =( echo -n '${{ secrets.IOS_MOBILEPROVISION_TGZ_BASE64 }}' | base64 -D -i - -o - ) -C ~/Library/MobileDevice/Provisioning\ Profiles
        ls -l ~/Library/MobileDevice/Provisioning\ Profiles
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
    
    - if: matrix.build-mode == 'manual' && matrix.language == 'swift'
      name: Compile sources
      run: set -o pipefail && NSUnbufferedIO=YES xcodebuild build -scheme "Redzone (Release)" -project "Redzone.xcodeproj" -destination "generic/platform=iOS" -derivedDataPath "./.build" -disableAutomaticPackageResolution -clonedSourcePackagesDirPath "./.packages" 2>&1 | xcbeautify --renderer github-actions
      working-directory: ./Redzone-iOS

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
